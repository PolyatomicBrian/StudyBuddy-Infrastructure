# cfn-nested-lambda.yaml
# Author: Brian Jopling, Jan 2020
#
# Description:
#   Deploys Lambda functions used by Study Buddy. Most Lambdas back the API.
#   Lambdas are deployed as placeholders, and are updated by the CICD Pipeline.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for creating Lambda functions.

Parameters:
  EnvVarDbName:
    Type: String
    Description: "DB name must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:dbInstanceIdentifier"
  EnvVarDbPassword:
    Type: String
    Description: "DB password must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:password"
  EnvVarDbUser:
    Type: String
    Description: "DB username must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:username"
  EnvVarDbUrl:
    Type: String
    Description: "DB url gets passed from RDS template."
    Default: "placeholder"
  SageMakerChunkClassifierEndpointName:
    Type: String
    Description: "SageMaker Endpoint for chunk classification passed from master template."
    Default: "placeholder"
  SageMakerQuestionClassifierEndpointName:
    Type: String
    Description: "SageMaker Endpoint for chunk classification passed from master template."
    Default: "placeholder"
  S3ArtifactsBucket:
    Type: String
    Default: studybuddy-cicd-pipeline
    Description: Bucket containing the Lambda source code.
  PythonLambdaDir:
    Type: String
    Default: APILambdas
  NodeLambdaDir:
    Type: String
    Default: NodeLambdas
  S3DocumentsBucketName:
    Type: String
    Default: studybuddy-documents
    Description: Bucket containing the document files.
  CognitoClientId:
    Type: String
    Description: "Cognito UserPool Client ID passed from master template."
    Default: "placeholder"
  CognitoUserPoolId:
    Type: String
    Description: "Cognito UserPool ID passed from master template."
    Default: "placeholder"
  HostedUserPoolDomainName:
    Type: String
    Description: "Cognito URL passed from master template."
    Default: "placeholder"
  CognitoCallbackUrl:
    Type: String
    Description: "Cognito callback URL passed from master template."
    Default: "placeholder"
  CognitoUserPoolArn:
    Type: String
    Description: "Cognito UserPool ARN passed from master template."
    Default: "placeholder"
  WsApiGwUrl:
    Type: String
    Description: "WebSocket API Gateway URL passed from master template."
    Default: "placeholder"
  LambdaWsHandlerName:
    Type: String
    Default: placeholder
    Description: Name of the ws_handler Lambda, passed in from the master template.

Resources:

  RoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: SageMakerInvocationPolicy
        PolicyDocument:
          Statement:
          - Action:
            - sagemaker:InvokeEndpoint
            Resource: arn:aws:sagemaker:*:*:endpoint/*
            Effect: Allow
      - PolicyName: WebSocketExecuteApiPolicy
        PolicyDocument:
          Statement:
          - Action:
            - execute-api:ManageConnections
            Resource: "*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaPythonLxmlLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.7
        - python3.8
      Content: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "LambdaLayers/lxml-3-8/python.zip"
      Description: "Contains the lxml package required by the Python Lambdas."
      LayerName: LxmlPythonLayer

  LambdaPythonLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.7
        - python3.8
      Content: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "LambdaLayers/PythonLibLayer/python.zip"
      Description: "Contains the packages required by the Python Lambdas."
      LayerName: PythonLayer

  LambdaDeleteStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/deleteStudent/deleteStudent.zip"
      FunctionName: deleteStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  RoleAskQuestionLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: SageMakerInvocationPolicy
        PolicyDocument:
          Statement:
          - Action:
            - sagemaker:InvokeEndpoint
            Resource: arn:aws:sagemaker:*:*:endpoint/*
            Effect: Allow
      - PolicyName: ComprehendPolicy
        PolicyDocument:
          Statement:
          - Action:
            - comprehend:DetectKeyPhrases
            Resource: "*"
            Effect: Allow
      - PolicyName: WebSocketExecuteApiPolicy
        PolicyDocument:
          Statement:
          - Action:
            - execute-api:ManageConnections
            Resource: "*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaAskQuestion:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/askQuestion/askQuestion.zip"
      FunctionName: askQuestion
      Handler: "lambda_function.lambda_handler"
      MemorySize: 3008
      Role: !GetAtt RoleAskQuestionLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "1"
          WS_API_ENDPOINT: !Ref WsApiGwUrl
          ENDPOINT_NAME: !Ref SageMakerQuestionClassifierEndpointName
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaClassifyChunk:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/classifyChunk/classifyChunk.zip"
      FunctionName: classifyChunk
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "3"
          ENDPOINT_NAME: !Ref SageMakerChunkClassifierEndpointName
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  RoleClassifyChunksLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: SageMakerInvocationPolicy
        PolicyDocument:
          Statement:
          - Action:
            - sagemaker:InvokeEndpoint
            Resource: arn:aws:sagemaker:*:*:endpoint/*
            Effect: Allow
      - PolicyName: ComprehendPolicy
        PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource: !Sub "arn:aws:s3:::${S3DocumentsBucketName}/*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaClassifyChunks:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/classifyChunks/classifyChunks.zip"
      FunctionName: classifyChunks
      Handler: "lambda_function.lambda_handler"
      MemorySize: 2048
      Role: !GetAtt RoleClassifyChunksLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 900
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "5"
          ENDPOINT_NAME: !Ref SageMakerChunkClassifierEndpointName
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 
          DOCUMENTS_FILES_BUCKET: !Ref S3DocumentsBucketName
          MAXIMUM_NUMBER_PERCENTAGE: "0.2"
          NUMBER_FILTER_MINIMUM: "300"
          MINIMUM_WORDS: "3"
          CLASSIFICATION_WEIGHT_ADJUST: "0.15"

  LambdaCreateConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/createConversation/createConversation.zip"
      FunctionName: createConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 


  LambdaCreateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/createStudent/createStudent.zip"
      FunctionName: createStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaAddBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/addBook/addBook.zip"
      FunctionName: addBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaDeleteBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/deleteBook/deleteBook.zip"
      FunctionName: deleteBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaDeleteConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/deleteConversation/deleteConversation.zip"
      FunctionName: deleteConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}"

  LambdaEditBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/editBook/editBook.zip"
      FunctionName: editBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  RoleEpubChunkerLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: S3ObjectsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource: !Sub "arn:aws:s3:::${S3DocumentsBucketName}/*"
            Effect: Allow
      - PolicyName: S3BucketPolicy
        PolicyDocument:
          Statement:
          - Action:
            - s3:ListBucket
            Resource: !Sub "arn:aws:s3:::${S3DocumentsBucketName}"
            Effect: Allow
      - PolicyName: LambdaInvokePolicy
        PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            - textract:*
            Resource: "*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaEpubChunker:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/epubChunker/epubChunker.zip"
      FunctionName: epubChunker
      Handler: "lambda_function.lambda_handler"
      MemorySize: 2048
      Role: !GetAtt RoleEpubChunkerLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
        - !Ref LambdaPythonLxmlLayer
      Timeout: 900
      Environment:
        Variables:
          DOCUMENT_FILES_BUCKET: !Ref S3DocumentsBucketName

  LambdaImageChunker:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/imageChunker/imageChunker.zip"
      FunctionName: imageChunker
      Handler: "lambda_function.lambda_handler"
      MemorySize: 2048
      Role: !GetAtt RoleEpubChunkerLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
        - !Ref LambdaPythonLxmlLayer
      Timeout: 900
      Environment:
        Variables:
          DOCUMENT_FILES_BUCKET: !Ref S3DocumentsBucketName

  LambdaExchange:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/exchange/exchange.zip"
      FunctionName: exchange
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          auth: !GetAtt CustomTriggerLambdaGenerateCognitoAuth.auth
          client_id: !Ref CognitoClientId
          cognito_url: !Join ['', ['https://', !Ref HostedUserPoolDomainName]]
          redirect_uri: !Ref CognitoCallbackUrl

  RoleHelperLambdaCognitoExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonCognitoReadOnly"

  HelperLambdaGenerateCognitoAuth:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import cfnresponse

          def lambda_handler(event, context):
              if event["RequestType"].lower() == "delete":
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {"status": "Nothing to do"})
              client = boto3.client('cognito-idp')
              client_id = event["ResourceProperties"]["ClientId"]
              pool_id = event["ResourceProperties"]["PoolId"]
              print("C: %s, P: %s" % (client_id, pool_id))
              response = client.describe_user_pool_client(
                  UserPoolId=pool_id,
                  ClientId=client_id
              )
              client_secret = response["UserPoolClient"]["ClientSecret"]
              auth_byte = bytes(client_id + ":" + client_secret, encoding="utf-8")
              b64_auth = base64.b64encode(auth_byte)
              ret_b64_auth = "Basic %s" % b64_auth.decode("utf-8")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {"auth": ret_b64_auth})
      Handler: "index.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleHelperLambdaCognitoExecution.Arn
      Runtime: python3.7
      Timeout: 10
  CustomTriggerLambdaGenerateCognitoAuth:
    Type: Custom::LambdaGenerateCognitoAuth
    Properties: 
      ServiceToken: !GetAtt HelperLambdaGenerateCognitoAuth.Arn
      ClientId: !Ref CognitoClientId
      PoolId: !Ref CognitoUserPoolId

  LambdaGetConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/getConversation/getConversation.zip"
      FunctionName: getConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 1024
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetConversations:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/getConversations/getConversations.zip"
      FunctionName: getConversations
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetSearchTerms:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/getSearchTerms/getSearchTerms.zip"
      FunctionName: getSearchTerms
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "1"
          ENDPOINT_NAME: !Ref SageMakerQuestionClassifierEndpointName

  LambdaLibrary:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/library/library.zip"
      FunctionName: library
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  RoleLambdaPresignExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: PresignedPutObjectPolicy
        PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${S3DocumentsBucketName}/*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaPresign:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/presign/presign.zip"
      FunctionName: presign
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaPresignExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          s3_bucket: !Ref S3DocumentsBucketName

  RoleLambdaProcessExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ProcessedObjectPolicy
        PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${S3DocumentsBucketName}/*"
            Effect: Allow
      - PolicyName: ProcessedInvokeEPubChunkerPolicy
        PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Resource: "*"
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaProcess:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/process/process.zip"
      FunctionName: process
      Handler: "lambda_function.lambda_handler"
      MemorySize: 2048
      Role: !GetAtt RoleLambdaProcessExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          DOCUMENT_FILES_BUCKET: !Ref S3DocumentsBucketName
          BEANSTALK_URL: ""
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaRemoveBookFromConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/removeBookFromConversation/removeBookFromConversation.zip"
      FunctionName: removeBookFromConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaProcessExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 10
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaTimeoutChecker:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/timeout_checker/timeout_checker.zip"
      FunctionName: timeout_checker
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaProcessExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 10
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaRateResponse:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/rateresponse/rateresponse.zip"
      FunctionName: rateResponse
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaUpdateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${PythonLambdaDir}/updateStudent/updateStudent.zip"
      FunctionName: updateStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 
          
  # * BEGIN Nodejs Lambdas * #

  RoleNodejsLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
      - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
      - "arn:aws:iam::aws:policy/AmazonCognitoReadOnly"

  LambdaAcceptInvitation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/accept_invitation.zip"
      FunctionName: accept_invitation
      Handler: "accept_invitation.acceptInvitation"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaAddUser:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/add_user.zip"
      FunctionName: add_user
      Handler: "add_user.addUser"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          WS_API_URL: !Ref WsApiGwUrl
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaAuthHook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/auth_hook.zip"
      FunctionName: auth_hook
      Handler: "auth_hook.authHook"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetInvitation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/get_invitation.zip"
      FunctionName: get_invitation
      Handler: "get_invitation.getInvitation"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaHandleBounce:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/handle_bounce.zip"
      FunctionName: handle_bounce
      Handler: "handle_bounce.handleBounce"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaRemoveUser:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/remove_user.zip"
      FunctionName: remove_user
      Handler: "remove_user.removeUser"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          WS_API_URL: !Ref WsApiGwUrl
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaSearchUsers:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/search_users.zip"
      FunctionName: search_users
      Handler: "search_users.searchUsers"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaSignupHook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/signup_hook.zip"
      FunctionName: signup_hook
      Handler: "signup_hook.signupHook"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaWsHandler:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: !Sub "${NodeLambdaDir}/artifacts/zip/ws_handler.zip"
      FunctionName: !Ref LambdaWsHandlerName
      Handler: "ws_handler.wsHandler"
      MemorySize: 256
      Role: !GetAtt RoleNodejsLambdaExecution.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPoolId
          DB_NAME: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          DB_URL: !Ref EnvVarDbUrl
          DB_USER: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  # Allow Cognito UserPool to invoke the signup and auth hooks (triggers).
  UserPoolSignupLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref LambdaSignupHook
      SourceArn: !Ref CognitoUserPoolArn

  UserPoolAuthLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref LambdaAuthHook
      SourceArn: !Ref CognitoUserPoolArn
