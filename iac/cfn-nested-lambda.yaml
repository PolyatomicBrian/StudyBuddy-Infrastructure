# cfn-nested-lambda.yaml
# Author: Brian Jopling, Jan 2020
#
# Description:
#   Deploys Lambda functions used by Study Buddy. Most Lambdas back the API.
#   Lambdas are deployed as placeholders, and are updated by the CICD Pipeline.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for creating Lambda functions.

Parameters:
  EnvVarDbName:
    Type: String
    Description: "DB name must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:dbInstanceIdentifier"
  EnvVarDbPassword:
    Type: String
    Description: "DB password must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:password"
  EnvVarDbUser:
    Type: String
    Description: "DB username must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:username"
  EnvVarDbUrl:
    Type: String
    Description: "DB url gets passed from RDS template."
    Default: "placeholder"
  SageMakerChunkClassifierEndpointName:
    Type: String
    Description: "SageMaker Endpoint for chunk classification passed from SageMaker template."
    Default: "placeholder"
  SageMakerQuestionClassifierEndpointName:
    Type: String
    Description: "SageMaker Endpoint for chunk classification passed from SageMaker template."
    Default: "placeholder"
  S3ArtifactsBucket:
    Type: String
    Default: studybuddy-cicd-pipeline
    Description: Bucket containing the Lambda source code.
  S3DocumentsBucket:
    Type: String
    Default: studybuddy-documents
    Description: Bucket containing the document files.
  CognitoClientId:
    Type: String
    Description: "Cognito UserPool Client ID passed from Cognito template."
    Default: "placeholder"
  CognitoUserPoolId:
    Type: String
    Description: "Cognito UserPool ID passed from Cognito template."
    Default: "placeholder"


Resources:

  RoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: SageMakerInvocationPolicy
        PolicyDocument:
          Statement:
          - Action:
            - sagemaker:InvokeEndpoint
            Resource: arn:aws:sagemaker:*:*:endpoint/*
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaPythonLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.7
        - python3.8
      Content: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "LambdaLayers/lxml-3-8/python.zip"
      Description: "Contains the packages required by the Python Lambdas."
      LayerName: PythonLayer

  LambdaDeleteStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "deleteStudent/deleteStudent.zip"
      FunctionName: deleteStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaAskQuestion:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "askQuestion/askQuestion.zip"
      FunctionName: askQuestion
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaChunkTextbook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "chunkTextbook/chunkTextbook.zip"
      FunctionName: chunkTextbook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaClassifyChunk:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "classifyChunk/classifyChunk.zip"
      FunctionName: classifyChunk
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "1"
          ENDPOINT_NAME: !Ref SageMakerChunkClassifierEndpointName
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaClassifyChunks:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "classifyChunks/classifyChunks.zip"
      FunctionName: classifyChunks
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "1"
          ENDPOINT_NAME: !Ref SageMakerChunkClassifierEndpointName
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaCreateConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "createConversation/createConversation.zip"
      FunctionName: createConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 


  LambdaCreateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "createStudent/createStudent.zip"
      FunctionName: createStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaDeleteBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "deleteBook/deleteBook.zip"
      FunctionName: deleteBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaEditBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "editBook/editBook.zip"
      FunctionName: editBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaEpubChunker:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "epubChunker/epubChunker.zip"
      FunctionName: epubChunker
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          DOCUMENT_FILES_BUCKET: !Ref S3DocumentsBucket

  LambdaExchange:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "exchange/exchange.zip"
      FunctionName: exchange
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          auth: !GetAtt CustomTriggerLambdaGenerateCognitoAuth.auth
          client_id: !Ref CognitoClientId

  RoleHelperLambdaCognitoExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonCognitoReadOnly"

  HelperLambdaGenerateCognitoAuth:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import cfnresponse

          def lambda_handler(event, context):
              if event["RequestType"].lower() == "delete":
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {"status": "Nothing to do"})
              client = boto3.client('cognito-idp')
              client_id = event["ResourceProperties"]["ClientId"]
              pool_id = event["ResourceProperties"]["PoolId"]
              print("C: %s, P: %s" % (client_id, pool_id))
              response = client.describe_user_pool_client(
                  UserPoolId=pool_id,
                  ClientId=client_id
              )
              client_secret = response["UserPoolClient"]["ClientSecret"]
              auth_byte = bytes(client_id + ":" + client_secret, encoding="utf-8")
              b64_auth = base64.b64encode(auth_byte)
              ret_b64_auth = "Basic %s" % b64_auth.decode("utf-8")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {"auth": ret_b64_auth})
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleHelperLambdaCognitoExecution.Arn
      Runtime: python3.7
      Timeout: 10
  CustomTriggerLambdaGenerateCognitoAuth:
    Type: Custom::LambdaGenerateCognitoAuth
    Properties: 
      ServiceToken: !GetAtt HelperLambdaGenerateCognitoAuth.Arn
      ClientId: !Ref CognitoClientId
      PoolId: !Ref CognitoUserPoolId

  LambdaGetConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "getConversation/getConversation.zip"
      FunctionName: getConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetConversations:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "getConversations/getConversations.zip"
      FunctionName: getConversations
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetSearchTerms:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "getSearchTerms/getSearchTerms.zip"
      FunctionName: getSearchTerms
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "1"
          ENDPOINT_NAME: !Ref SageMakerQuestionClassifierEndpointName

  LambdaLibrary:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "library/library.zip"
      FunctionName: library
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaPresign:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "presign/presign.zip"
      FunctionName: presign
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          s3_bucket: !Ref S3DocumentsBucket

  LambdaProcess:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "process/process.zip"
      FunctionName: process
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          DOCUMENT_FILES_BUCKET: !Ref S3DocumentsBucket
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 


  LambdaRateResponse:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "rateresponse/rateresponse.zip"
      FunctionName: rateResponse
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaUpdateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "updateStudent/updateStudent.zip"
      FunctionName: updateStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaUpload:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3ArtifactsBucket
        S3Key: "upload/upload.zip"
      FunctionName: upload
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.8
      Layers: 
        - !Ref LambdaPythonLayer 
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Ref EnvVarDbUrl
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 
          
          
          
          
          
          
          
          
          
                  

  