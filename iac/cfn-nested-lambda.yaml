# cfn-nested-lambda.yaml
# Author: Brian Jopling, Jan 2020
#
# Description:
#   Deploys Lambda functions used by Study Buddy. Most Lambdas back the API.
#   Lambdas are deployed as placeholders, and are updated by the CICD Pipeline.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for creating Lambda functions.

Parameters:
  EnvVarDbName:
    Type: String
    Description: "DB name must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:dbInstanceIdentifier"
  EnvVarDbPassword:
    Type: String
    Description: "DB password must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:password"
  EnvVarDbUrl:
    Type: String
    Description: "DB url must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:host"
  EnvVarDbUser:
    Type: String
    Description: "DB username must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:SecretString:username"

Resources:

  RoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaDeleteStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: deleteStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaAskQuestion:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: askQuestion
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaChunkTextbook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: chunkTextbook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaClassifyChunk:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: classifyChunk
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          CLASSIFICATION_COUNT: "3"
          ENDPOINT_NAME: chunk-classifier

  LambdaCreateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: createStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaDeleteBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: deleteBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaEditBook:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: editBook
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetConversation:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: getConversation
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaGetConversations:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: getConversations
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaLibrary:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: library
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaRateResponse:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: rateResponse
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaUpdateStudent:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: updateStudent
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 

  LambdaUpload:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def lambda_handler():
            print("Placeholder")
      FunctionName: upload
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaExecution.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          db_name: !Sub "{{resolve:secretsmanager:${EnvVarDbName}}}"
          db_password: !Sub "{{resolve:secretsmanager:${EnvVarDbPassword}}}" 
          db_url: !Sub "{{resolve:secretsmanager:${EnvVarDbUrl}}}"
          db_user: !Sub "{{resolve:secretsmanager:${EnvVarDbUser}}}" 
          
          
          
          
          
          
          
          
          
                  

  