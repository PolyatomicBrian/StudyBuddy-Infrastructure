# cfn-nested-rds-import.yaml
# Author: Brian Jopling, Feb 2020
#
# Description:
#   Deploys components required for populating the RDS.
#   Creates the supporting infra (CodeBuild
#   and Lambda) to fetch the sql dump and import it 
#   into the Application Database.
#


AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for creating RDS infra.

Parameters:
  EnvVarDbPassword:
    Type: String
    Description: "DB password must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:password"
  EnvVarDbUser:
    Type: String
    Description: "DB username must be stored in SecretsManager. Provide the key name here."
    Default: "db-credentials:username"
  SecretName:
    Type: String
    Default: "db-credentials"
  S3ArtifactsBucket:
    Type: String
    Default: studybuddy-cicd-pipeline
    Description: Bucket containing the Lambda source code.
  RDSEndpointAddress:
    Type: String
    Default: "placeholder"
    Description: Gets overwritten by value passed from master template.
  SqlDump:
    Type: String
    Default: "schema.sql"

Resources:

  # Setup schema in RDS
  RDSCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: S3
        Location: !Sub ${S3ArtifactsBucket}/Database/
        BuildSpec: !Sub |
          version: 0.2
          env:
            secrets-manager:
              DBPASS: ${EnvVarDbPassword}
              DBUSER: ${EnvVarDbUser}
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
              - echo Installing source dependencies...
              - apt-get update -y && apt-get dist-upgrade -y
              - apt-get install mysql-server -y
            build:
              commands:
              - echo Import started 
              - ls
              - sed -i "s/buddy_admin/$DBUSER/g" ${SqlDump}
              - mysql -h ${RDSEndpointAddress} -u $DBUSER -p$DBPASS < ${SqlDump}
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
      Name: "RDS-InitSchema-CodeBuild"
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildSQLImportRole
        - Arn

  CodeBuildSQLImportRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildSqlImportRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
             - !Join ['',['arn:aws:s3:::',!Ref S3ArtifactsBucket, '/*']]
             - !Join ['',['arn:aws:s3:::',!Ref S3ArtifactsBucket]]
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          -
            Effect: Allow
            Action:
              - ec2:CreateNetworkInterfacePermission
            Resource: !Sub "arn:aws:ec2:*:${AWS::AccountId}:network-interface/*"
          -
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}*"
      Roles:
        -
          !Ref CodeBuildSQLImportRole

  # Trigger CodeBuild so it runs its script to populate the MySQL db.
  LambdaInvokeCodeBuild:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: !Sub |
          import boto3
          import cfnresponse

          def lambda_handler( event, context ):

            if event['RequestType'] == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"status": "success"})
            
            cb = boto3.client( 'codebuild' )

            build = {
              'projectName': '${RDSCodeBuildProject}'
            }

            print( 'Starting build for project {0}...'.format( build['projectName']) )
            cb.start_build( **build )
            print( 'Successfully launched build.' )

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {"status": "success"})
      FunctionName: invokeCodeBuild
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt RoleLambdaCodeBuildInvocation.Arn
      Runtime: python3.7
      Timeout: 150

  CustomTriggerLambdaInvokeCodeBuild:
    Type: Custom::LambdaInvokeCodeBuild
    DependsOn: RDSCodeBuildProject
    Properties: 
      ServiceToken: 
        !GetAtt LambdaInvokeCodeBuild.Arn

  RoleLambdaCodeBuildInvocation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RoleLambdaInvokeCodeBuild
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  LambdaInvokeCodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaInvokeCodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - codebuild:StartBuild
            Resource:
             - !GetAtt RDSCodeBuildProject.Arn
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      Roles:
        -
          !Ref RoleLambdaCodeBuildInvocation