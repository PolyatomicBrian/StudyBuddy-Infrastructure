# cfn-nested-cognito.yaml
# Author: Brian Jopling, Jan 2020
#
# Description:
#   Deploys components required for authentication & authorization; namely
#   the Cognito User Pool and any supporting infrastructure.
#
# Usage: - Manual validation of ACM cert must be done during the deployment process.
#           Otherwise, the stack will hang. (TODO, automate)
#        - Upon completion of deployment, an Alias record must be created to point
#           the custom domain url to the CloudFront distribution of the Hosted UI. (TODO, automate)
#
# Pre-requisites: Google Client ID and Client Secret must be stored in SecretsManager before deploying.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for Cognito (Auth) configuration.

Parameters:
  EmailVerificationMessage:
    Type: String
    Default: "Welcome to StudyBuddy! Your code is {####}"
  EmailVerificationSubject:
    Type: String
    Default: "Welcome to StudyBuddy"
  URLFrontend:
    Type: String
    Default: "www.somethingcode.com"
  HostedUserPoolDomainName:
    Type: String
    Default: "signin.somethingcode.com"
  IdentityProviderGoogleClientId:
    Type: String
    Description: "Client ID must be stored in SecretsManager. Provide the key name here."
    Default: "idp-google-client-credentials:SecretString:client-id"
  IdentityProviderGoogleClientSecret:
    Type: String
    Description: "Secret must be stored in SecretsManager. Provide the key name here."
    Default: "idp-google-client-credentials:SecretString:client-secret"

Resources:

  # The User Pool itself.
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AutoVerifiedAttributes: 
        - email
      EmailConfiguration: 
        EmailSendingAccount: COGNITO_DEFAULT 
      EmailVerificationMessage: !Ref EmailVerificationMessage
      EmailVerificationSubject: !Ref EmailVerificationSubject
      LambdaConfig:
        PostAuthentication: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:auth_hook"
        PostConfirmation: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:auth_hook"
        PreSignUp: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:signup_hook"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
      UserPoolName: StudyBuddyUserPool
      UsernameAttributes: 
        - email

  # Client to be used by frontend.
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    DependsOn: CognitoIdentityProviderGoogle
    Properties:
      AllowedOAuthFlows: 
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      CallbackURLs: 
        - !Join ['', ['https://', !Ref URLFrontend, '/']]
      ClientName: StudyBuddyFrontend
      DefaultRedirectURI: !Join ['', ['https://', !Ref URLFrontend, '/']]
      GenerateSecret: true
      LogoutURLs: 
        - !Join ['', ['https://', !Ref URLFrontend, '/logout']]
      RefreshTokenValidity: 30
      SupportedIdentityProviders: 
        - COGNITO
        - Google
      UserPoolId: !Ref CognitoUserPool

  # Creating a UserPoolDomain provides us with the Hosted UI.
  CognitoUserPoolDomainName:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      CustomDomainConfig: 
        CertificateArn: !Ref ACMCertificateForHostedUserPool
      Domain: !Ref HostedUserPoolDomainName
      UserPoolId: !Ref CognitoUserPool

  # ACM cert for providing https for the Hosted UI.
  ACMCertificateForHostedUserPool:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref HostedUserPoolDomainName
      ValidationMethod: DNS

  # IDP for Google SSO
  CognitoIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties: 
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
      ProviderDetails:
        client_id: !Sub "{{resolve:secretsmanager:${IdentityProviderGoogleClientId}}}"
        client_secret: !Sub "{{resolve:secretsmanager:${IdentityProviderGoogleClientSecret}}}"
        authorize_scopes: profile email openid
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref CognitoUserPool

  # TODO
  # Automate ACM cert validation
  # Automate R53 record creation for HostedUserPoolDomainName to 
  #   point to CloudFront URL of the Hosted UI.

Outputs:
  CognitoHostedSigninUrl: 
    Value: !Ref HostedUserPoolDomainName
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
