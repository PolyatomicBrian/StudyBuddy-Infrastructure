# cfn-nested-cicd.yaml
# Author: Brian Jopling, Jan 2020
#
# Description:
#   Deploys components required for frontend and backend CICD; namely the
#   CodePipeline, CodeBuild, and CodeDeploy resources.
#
# Pre-requisite: GitHub token must be stored in SecretsManager.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: Nested template for CICD Pipeline deployment.

Parameters:

  S3ArtifactsBucket:
    Type: String
    Default: studybuddy-cicd-pipeline
    Description: Bucket containing the Lambda source code.
  S3FrontendDeployBucket:
    Type: String
    Default: www.somethingcode.com
    Description: Bucket that hosts the frontend web files.

  GitHubUserName:
    Type: String
    Default: Chudly63
  GitHubFrontendRepo:
    Type: String
    Default: StudyBuddy-FrontEnd
  GitHubBackendRepo:
    Type: String
    Default: StudyBuddy-BackEnd
  GitHubBranchFrontend:
    Type: String
    Default: master
  GitHubBranchBackend:
    Type: String
    Default: master
  GitHubToken:
    Type: String
    Default: "cicd-github-access:SecretString:token"
    Description: GitHub token must be stored in SecretsManager.

Resources:

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3ArtifactsBucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            Effect: Allow
          - Action:
            - s3:*
            - cloudformation:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'

  FrontendCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: frontend-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            Owner: !Ref GitHubUserName
            Repo: !Ref GitHubFrontendRepo
            Branch: !Ref GitHubBranchFrontend
            OAuthToken: !Sub "{{resolve:secretsmanager:${GitHubToken}}}"
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: DeployOutput
          Configuration:
            ProjectName: !Ref FrontendCodeBuildProject
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: S3
          InputArtifacts:
          - Name: DeployOutput
          Configuration:
            BucketName: !Ref S3FrontendDeployBucket
            Extract: true
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref S3ArtifactsBucket

  FrontendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              CACHE_CONTROL: "86400"
              S3_BUCKET: "${S3FrontendDeployBucket}"
              BUILD_FOLDER: "dist"
          phases:
            install:
              runtime-versions:
                nodejs: 10
              commands:
              - echo Installing source NPM dependencies...
              - npm install
              - npm install -g @angular/cli
            build:
              commands:
              - echo Build started 
              - ng build --prod
          artifacts:
            files:
            - '**/*'
            base-directory: 'dist*'
            discard-paths: yes
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
      Name: "FrontEnd-Angular-CodeBuild"
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildRole
        - Arn

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
            Resource:
             - !Join ['',['arn:aws:s3:::',!Ref S3ArtifactsBucket, '/*']]
             - !Join ['',['arn:aws:s3:::',!Ref S3ArtifactsBucket]]
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          -
            Effect: Allow
            Action:
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
            Resource: arn:aws:lambda:*:*:function:*
      Roles:
        -
          !Ref CodeBuildRole

  BackendCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: backend-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceBackendOutput
          Configuration:
            Owner: !Ref GitHubUserName
            Repo: !Ref GitHubBackendRepo
            Branch: !Ref GitHubBranchBackend
            OAuthToken: !Sub "{{resolve:secretsmanager:${GitHubToken}}}"
          RunOrder: 1
      - Name: DeployGitHubToS3
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: S3
          InputArtifacts:
          - Name: SourceBackendOutput
          Configuration:
            BucketName: !Ref S3ArtifactsBucket
            Extract: true
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: SourceBackendOutput
          OutputArtifacts:
          - Name: DeployBackendOutput
          Configuration:
            ProjectName: !Ref BackendCodeBuildProject
          RunOrder: 1
      - Name: DeployZippedArtifacts
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: S3
          InputArtifacts:
          - Name: DeployBackendOutput
          Configuration:
            BucketName: !Ref S3ArtifactsBucket
            Extract: true
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref S3ArtifactsBucket

  BackendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2

          phases:
            install:
              runtime-versions:
                  nodejs: 12
              commands:
                  - echo Starting...
            build:
              commands:
                  - echo Deployment started.
                  - cd ./APILambdas/
                  - |
                    for dirname in */
                    do
                      dirname=${dirname%*/}
                      cd $dirname
                      zip -r ${dirname}.zip *
                      cd ../
                    done;
                  - cd ..
                  - cd ./NodeLambdas/
                  - npm install
                  - npm run build-all
                  - echo Deployment complete.
          artifacts:
            files:
            - '**/*'
            discard-paths: no
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        Type: LINUX_CONTAINER
      Name: "Backend-CodeBuild"
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildRole
        - Arn
